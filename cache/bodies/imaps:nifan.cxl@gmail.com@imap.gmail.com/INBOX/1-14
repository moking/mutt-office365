Return-Path: <nifan.cxl@gmail.com>
Received: from debian ([50.205.20.42])
        by smtp.gmail.com with ESMTPSA id w31-20020a25ac1f000000b00d9ab86bdaffsm687302ybi.12.2023.10.20.10.05.41
        (version=TLS1_3 cipher=TLS_AES_256_GCM_SHA384 bits=256/256);
        Fri, 20 Oct 2023 10:05:41 -0700 (PDT)
From: fan <nifan.cxl@gmail.com>
X-Google-Original-From: fan <fan@debian>
Date: Fri, 20 Oct 2023 10:05:28 -0700
To: Jonathan Cameron <Jonathan.Cameron@huawei.com>
Cc: Fan Ni <nifan.cxl@gmail.com>, fan.ni@samsung.com
Subject: Re: Question about the bitmap usage in dcd emulation patch
Message-ID: <ZTKzWIWXnAflQtYf@debian>
References: <ZTGe3TtFdC-q6L3P@debian>
 <20231020133333.00000ec6@Huawei.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <20231020133333.00000ec6@Huawei.com>

On Fri, Oct 20, 2023 at 01:33:33PM +0100, Jonathan Cameron wrote:
> On Thu, 19 Oct 2023 14:25:49 -0700
> Fan Ni <nifan.cxl@gmail.com> wrote:

Thanks Jonathan. See below.

> 
> > Hi Jonathan,
> > 
> > While reworking on the DCD emulation patches, I try to understand some
> > comments you added in the code in your tree.
> > https://gitlab.com/jic23/qemu/-/blob/cxl-2023-09-26/hw/mem/cxl_type3.c?ref_type=heads#L2095
> > /*
> >  * TODO: Should only update the bitmaps after host has accepted the
> >  * change (except for forced removal). It will be necessary to
> >  * track offered but not accepted changes. Perhaps a shadow bitmap
> >  * will be needed for this.
> >  */
> > 
> > Currently, the bitmap update (set/clear) is done when processing qmp
> > operation, also you mentioned we may need separate bitmaps to track offered
> >     and accepted changes. I have two questions about this.
> > 1. Why we need bitmap to track the offered changes? (FYI. In my latest change,
> > I added extent list to track pending add and pending release extents.)
> 
> Couple of reasons.
> 1) Don't allow a guest to accept extents it wasn't offered.
> 2) Don't allow them to be reallocated to someone else or offered again until release issued.
> 3) Reporting available extents (which is total - offered) (could use a count for this)

I think a list for extents pending to add/release respectively can
achieve the same goal as the offering bitmap, right?
In my latest version, I use the pending extent list to verify the extent
list from the host in the processing of the dc add/release response
command.

Basically we have three extent list for DC in the device now;
1: extents: tracking the extents that have been accepted by a host;
2. extents_pending_to_add: tracking extents offered to host (currently
from QMP interface, will be from FM later when it is implemented);
When a Add response is received, will be used to verify the payload-in extent
list, and updated. But if the host does not accept any of the extents,
it seems we do not have a way to update the list correctly. (or just clean it
assuming there can be only one outstanding add request?)

3. extents_pending_to_release: tracking extents to be released (Also
from QMP now and will from FM). When a release response is received,
will be used to verify the payload-in extent list, and updated. But if
the host does not release any of the extents, it seems we do not have a
way to update the list correctly (or just clean it assuming there can be
only one outstanding release request?)

And the bitmap is used to validate read/write requests, so we do not
need to iterate the "extents" to check whether it is backed or not. 
For this map, currently it is set/cleared when processing QMP requests,
but I think it should be in functions to process dc add/release
RESPONSE.

Let me know your thought.

> 
> 
> 
> > 2. If we only maintain a bitmap to track, we should track only accepted
> > extents, right? If so, we should update it in the add/release response command.
> The one we use to return the extents list etc needs to be the one updated on
> acceptance, and release response. But we need the other to ensure that
> the action those commands indicate is a valid one.
> > 
> > btw, I almost finished the rework and it is based on your cxl-2023-09-26
> > branch and is here:
> > https://github.com/moking/qemu-jic-clone/tree/dcd-dev
> 
> Great -  Assuming I find time I want to add the FM-API side of things to
> allow us to prove that bit out as well before plumbers.  Life / work gotten
> a bit crazy recently so it might be on the Sunday in a hotel room ;)
> 
> Also we should talk about the Plumbers session.  I'm thinking we want to

Yeah. I am planning to start to spend some time on it from next week.

> focus only on in flight stuff + future directions.  A big part of that will
> be DCD which I'm hoping you don't mind covering.  The future directions
> side of things needs some brainstorming so we have some bullet points to kick
> the discussion off around!   There is a session later on (mainly Ira + navneet

I will provide some of my thoughts about DCD, maybe some drafted slides
so it will be easier to discuss. 
Of course, we can always chat through email or discard if needed. Do not
hesitate to contact me.

Thanks,
Fan
> though I'm  down to introduce it) on the software stack on top.   We might
> well lean on the fact we already introduced it in the QEMU session to save
> time in that one!  (they have a long list of questions!)

> 
> Jonathan
> 
> > 
> > Thanks,
> > Fan
> > 
> > 
> 
